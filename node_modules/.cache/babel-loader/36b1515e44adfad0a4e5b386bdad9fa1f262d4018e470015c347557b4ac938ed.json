{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nclass TestCaseGenerator {\n  // Ana test case üretimi fonksiyonu\n  static async generateFromDescription(imageFile, description) {\n    try {\n      // Açıklamayı analiz et\n      const analysis = this.analyzeDescription(description);\n\n      // UI componentlerini tahmin et (gerçek projede image analysis kullanılabilir)\n      const uiComponents = this.detectUIComponents(analysis);\n\n      // Test case'leri üret\n      const testCases = this.generateTestCases(uiComponents, analysis);\n      return testCases;\n    } catch (error) {\n      console.error('Test case generation failed:', error);\n      throw error;\n    }\n  }\n\n  // Açıklamayı analiz ederek anahtar kelimeleri çıkar\n  static analyzeDescription(description) {\n    const lowerDesc = description.toLowerCase();\n    const analysis = {\n      components: [],\n      testTypes: [],\n      priority: 'Medium',\n      userType: 'user',\n      requirements: []\n    };\n\n    // UI Componentlerini tespit et\n    const componentKeywords = {\n      'dropdown': ['dropdown', 'açılır', 'seçim', 'liste', 'menü'],\n      'button': ['buton', 'button', 'tıkla', 'bas'],\n      'form': ['form', 'giriş', 'kayıt', 'doldur'],\n      'input': ['input', 'alan', 'field', 'giriş'],\n      'navigation': ['menü', 'nav', 'navigasyon', 'yönlendirme'],\n      'table': ['tablo', 'table', 'liste', 'satır'],\n      'modal': ['modal', 'popup', 'pencere'],\n      'search': ['arama', 'search', 'filtre'],\n      'upload': ['yükle', 'upload', 'dosya'],\n      'login': ['giriş', 'login', 'oturum']\n    };\n    for (const [component, keywords] of Object.entries(componentKeywords)) {\n      if (keywords.some(keyword => lowerDesc.includes(keyword))) {\n        analysis.components.push(component);\n      }\n    }\n\n    // Test tiplerini tespit et\n    const testTypeKeywords = {\n      'functional': ['işlevsel', 'functional', 'çalış'],\n      'ui': ['görünüm', 'ui', 'arayüz', 'görsel'],\n      'validation': ['doğrula', 'validation', 'kontrol', 'geçerli'],\n      'accessibility': ['erişilebilir', 'accessibility', 'keyboard'],\n      'performance': ['performans', 'hız', 'yavaş'],\n      'negative': ['negative', 'hatalı', 'yanlış', 'geçersiz']\n    };\n    for (const [testType, keywords] of Object.entries(testTypeKeywords)) {\n      if (keywords.some(keyword => lowerDesc.includes(keyword))) {\n        analysis.testTypes.push(testType);\n      }\n    }\n\n    // Varsayılan test tipleri\n    if (analysis.testTypes.length === 0) {\n      analysis.testTypes = ['functional', 'ui'];\n    }\n\n    // Öncelik belirleme\n    if (lowerDesc.includes('kritik') || lowerDesc.includes('önemli') || lowerDesc.includes('high')) {\n      analysis.priority = 'High';\n    } else if (lowerDesc.includes('düşük') || lowerDesc.includes('low')) {\n      analysis.priority = 'Low';\n    }\n\n    // Kullanıcı tipi\n    if (lowerDesc.includes('admin') || lowerDesc.includes('yönetici')) {\n      analysis.userType = 'admin';\n    }\n    return analysis;\n  }\n\n  // UI componentlerini tespit et\n  static detectUIComponents(analysis) {\n    const components = analysis.components.length > 0 ? analysis.components : ['button', 'form']; // varsayılan componentler\n\n    return components.map(component => ({\n      type: component,\n      name: this.getComponentName(component),\n      testScenarios: this.getComponentScenarios(component)\n    }));\n  }\n\n  // Component isimleri\n  static getComponentName(componentType) {\n    const names = {\n      'dropdown': 'Dropdown Menü',\n      'button': 'Buton',\n      'form': 'Form',\n      'input': 'Giriş Alanı',\n      'navigation': 'Navigasyon',\n      'table': 'Tablo',\n      'modal': 'Modal Pencere',\n      'search': 'Arama',\n      'upload': 'Dosya Yükleme',\n      'login': 'Giriş Sistemi'\n    };\n    return names[componentType] || componentType;\n  }\n\n  // Component için test senaryoları\n  static getComponentScenarios(componentType) {\n    const scenarios = {\n      'dropdown': ['Tüm seçeneklerin görüntülenmesi', 'Seçim yapma işlemi', 'Keyboard navigation', 'Varsayılan değer kontrolü', 'Boş seçim validation'],\n      'button': ['Buton tıklama işlevi', 'Hover state kontrolü', 'Disabled state kontrolü', 'Loading state kontrolü'],\n      'form': ['Form doldurma işlemi', 'Validation kuralları', 'Submit işlemi', 'Reset işlemi', 'Error handling'],\n      'input': ['Veri girişi', 'Validation kontrolleri', 'Placeholder text', 'Character limit', 'Format kontrolü'],\n      'navigation': ['Menü öğelerine tıklama', 'Sayfa yönlendirmeleri', 'Breadcrumb kontrolü', 'Mobile responsive'],\n      'table': ['Veri görüntüleme', 'Sıralama işlemleri', 'Filtreleme', 'Pagination', 'Row selection'],\n      'modal': ['Modal açılması', 'Modal kapanması', 'Overlay tıklama', 'ESC tuşu ile kapanma'],\n      'search': ['Arama işlevi', 'Sonuç görüntüleme', 'Boş arama', 'Filtre uygulama'],\n      'upload': ['Dosya seçimi', 'Drag & drop', 'Dosya validation', 'Upload progress'],\n      'login': ['Başarılı giriş', 'Hatalı giriş', 'Şifre unuttum', 'Session yönetimi']\n    };\n    return scenarios[componentType] || ['Temel işlevsellik kontrolü'];\n  }\n\n  // Test case'leri üret\n  static generateTestCases(uiComponents, analysis) {\n    const testCases = [];\n    let testIdCounter = 1;\n    uiComponents.forEach(component => {\n      component.testScenarios.forEach(scenario => {\n        analysis.testTypes.forEach(testType => {\n          const testCase = this.createTestCase(testIdCounter++, component, scenario, testType, analysis);\n          testCases.push(testCase);\n        });\n      });\n    });\n\n    // Edge case'ler ve negative testler ekle\n    testCases.push(...this.generateEdgeCaseTests(uiComponents, analysis, testIdCounter));\n    return testCases;\n  }\n\n  // Tek bir test case oluştur\n  static createTestCase(id, component, scenario, testType, analysis) {\n    const priority = this.determinePriority(scenario, testType, analysis);\n    const steps = this.generateTestSteps(component, scenario, testType);\n    return {\n      id: `TC_${String(id).padStart(3, '0')}`,\n      uuid: uuidv4(),\n      summary: `${component.name} - ${scenario}`,\n      description: `${component.name} bileşenindeki ${scenario.toLowerCase()} işlevselliğinin ${testType} testi`,\n      testType: testType === 'functional' ? 'Manual' : 'Manual',\n      priority: priority,\n      component: component.name,\n      labels: [testType, component.type, this.getTestLabel(scenario)],\n      preconditions: this.generatePreconditions(component, analysis),\n      steps: steps,\n      expectedResults: this.generateExpectedResults(component, scenario),\n      testData: this.generateTestData(component, scenario),\n      estimatedTime: this.estimateTestTime(steps.length),\n      createdAt: new Date().toISOString()\n    };\n  }\n\n  // Test adımlarını üret\n  static generateTestSteps(component, scenario, testType) {\n    const baseSteps = ['Uygulamaya giriş yap', `${component.name} bileşenine git`];\n    let specificSteps = [];\n    if (component.type === 'dropdown') {\n      specificSteps = ['Dropdown menüsüne tıkla', 'Tüm seçeneklerin görüntülendiğini kontrol et', 'Bir seçenek seç', 'Seçimin yapıldığını doğrula'];\n    } else if (component.type === 'form') {\n      specificSteps = ['Form alanlarını doldur', 'Gerekli alanları kontrol et', 'Submit butonuna tıkla', 'İşlem sonucunu kontrol et'];\n    } else if (component.type === 'button') {\n      specificSteps = ['Butonun görünür olduğunu kontrol et', 'Butona tıkla', 'Beklenen aksiyonun gerçekleştiğini doğrula'];\n    } else {\n      specificSteps = [`${component.name} ile etkileşim kur`, 'Beklenen davranışı kontrol et'];\n    }\n    return [...baseSteps, ...specificSteps];\n  }\n\n  // Beklenen sonuçları üret\n  static generateExpectedResults(component, scenario) {\n    const baseResults = ['Başarıyla giriş yapılır', `${component.name} bileşeni erişilebilir durumda`];\n    if (component.type === 'dropdown') {\n      baseResults.push('Dropdown menü açılır', 'Tüm seçenekler listelenir', 'Seçim işlemi başarıyla tamamlanır');\n    } else if (component.type === 'form') {\n      baseResults.push('Form alanları doldurulur', 'Validation kuralları uygulanır', 'Form başarıyla submit edilir');\n    } else {\n      baseResults.push('Bileşen beklenen şekilde çalışır', 'İşlem başarıyla tamamlanır');\n    }\n    return baseResults;\n  }\n\n  // Test verilerini üret\n  static generateTestData(component, scenario) {\n    const testData = {\n      validUser: 'test_user@example.com',\n      environment: 'Test Environment'\n    };\n    if (component.type === 'dropdown') {\n      testData.options = ['Seçenek 1', 'Seçenek 2', 'Seçenek 3'];\n    } else if (component.type === 'form') {\n      testData.validInputs = {\n        name: 'Test User',\n        email: 'test@example.com',\n        phone: '5551234567'\n      };\n      testData.invalidInputs = {\n        email: 'invalid-email',\n        phone: '123'\n      };\n    }\n    return testData;\n  }\n\n  // Edge case testleri üret\n  static generateEdgeCaseTests(uiComponents, analysis, startId) {\n    const edgeCases = [];\n\n    // Performance test\n    edgeCases.push({\n      id: `TC_${String(startId).padStart(3, '0')}`,\n      uuid: uuidv4(),\n      summary: 'Performans Testi - Sayfa Yükleme',\n      description: 'Sayfanın makul sürede yüklendiğinin kontrolü',\n      testType: 'Manual',\n      priority: 'Low',\n      component: 'Page',\n      labels: ['performance', 'loading'],\n      preconditions: ['Browser açık', 'Internet bağlantısı mevcut'],\n      steps: ['Sayfayı yenile', 'Yükleme süresini ölç', 'Tüm elementlerin yüklendiğini kontrol et'],\n      expectedResults: ['Sayfa 3 saniye içinde yüklenir', 'Tüm elementler görünür durumda'],\n      testData: {\n        maxLoadTime: '3 seconds'\n      },\n      estimatedTime: '5 minutes',\n      createdAt: new Date().toISOString()\n    });\n\n    // Browser compatibility test\n    edgeCases.push({\n      id: `TC_${String(startId + 1).padStart(3, '0')}`,\n      uuid: uuidv4(),\n      summary: 'Cross-Browser Compatibility',\n      description: 'Farklı tarayıcılarda uyumluluğun kontrolü',\n      testType: 'Manual',\n      priority: 'Medium',\n      component: 'Application',\n      labels: ['compatibility', 'browser'],\n      preconditions: ['Farklı tarayıcılar yüklü'],\n      steps: ['Chrome\\'da uygulamayı aç', 'Firefox\\'ta uygulamayı aç', 'Safari\\'de uygulamayı aç (Mac)', 'Her tarayıcıda işlevselliği test et'],\n      expectedResults: ['Tüm tarayıcılarda aynı görünüm', 'İşlevsellik farklılığı yok'],\n      testData: {\n        browsers: ['Chrome', 'Firefox', 'Safari', 'Edge']\n      },\n      estimatedTime: '15 minutes',\n      createdAt: new Date().toISOString()\n    });\n    return edgeCases;\n  }\n\n  // Yardımcı fonksiyonlar\n  static determinePriority(scenario, testType, analysis) {\n    if (testType === 'functional' || scenario.includes('Ana')) {\n      return 'High';\n    } else if (testType === 'validation' || testType === 'ui') {\n      return 'Medium';\n    }\n    return 'Low';\n  }\n  static getTestLabel(scenario) {\n    if (scenario.includes('Keyboard')) return 'accessibility';\n    if (scenario.includes('Validation')) return 'validation';\n    if (scenario.includes('Error')) return 'negative';\n    return 'functional';\n  }\n  static generatePreconditions(component, analysis) {\n    const basePreconditions = ['Test ortamında uygulama erişilebilir', 'Geçerli kullanıcı hesabı mevcut'];\n    if (analysis.userType === 'admin') {\n      basePreconditions.push('Admin yetkilerine sahip kullanıcı');\n    }\n    return basePreconditions;\n  }\n  static estimateTestTime(stepCount) {\n    const baseTime = 3; // dakika\n    const perStepTime = 1; // dakika per step\n    return `${baseTime + stepCount * perStepTime} dakika`;\n  }\n}\nexport default TestCaseGenerator;","map":{"version":3,"names":["v4","uuidv4","TestCaseGenerator","generateFromDescription","imageFile","description","analysis","analyzeDescription","uiComponents","detectUIComponents","testCases","generateTestCases","error","console","lowerDesc","toLowerCase","components","testTypes","priority","userType","requirements","componentKeywords","component","keywords","Object","entries","some","keyword","includes","push","testTypeKeywords","testType","length","map","type","name","getComponentName","testScenarios","getComponentScenarios","componentType","names","scenarios","testIdCounter","forEach","scenario","testCase","createTestCase","generateEdgeCaseTests","id","determinePriority","steps","generateTestSteps","String","padStart","uuid","summary","labels","getTestLabel","preconditions","generatePreconditions","expectedResults","generateExpectedResults","testData","generateTestData","estimatedTime","estimateTestTime","createdAt","Date","toISOString","baseSteps","specificSteps","baseResults","validUser","environment","options","validInputs","email","phone","invalidInputs","startId","edgeCases","maxLoadTime","browsers","basePreconditions","stepCount","baseTime","perStepTime"],"sources":["D:/Dev/Me/xray-ai/src/components/TestCaseGenerator.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\nclass TestCaseGenerator {\n  \n  // Ana test case üretimi fonksiyonu\n  static async generateFromDescription(imageFile, description) {\n    try {\n      // Açıklamayı analiz et\n      const analysis = this.analyzeDescription(description);\n      \n      // UI componentlerini tahmin et (gerçek projede image analysis kullanılabilir)\n      const uiComponents = this.detectUIComponents(analysis);\n      \n      // Test case'leri üret\n      const testCases = this.generateTestCases(uiComponents, analysis);\n      \n      return testCases;\n      \n    } catch (error) {\n      console.error('Test case generation failed:', error);\n      throw error;\n    }\n  }\n\n  // Açıklamayı analiz ederek anahtar kelimeleri çıkar\n  static analyzeDescription(description) {\n    const lowerDesc = description.toLowerCase();\n    \n    const analysis = {\n      components: [],\n      testTypes: [],\n      priority: 'Medium',\n      userType: 'user',\n      requirements: []\n    };\n\n    // UI Componentlerini tespit et\n    const componentKeywords = {\n      'dropdown': ['dropdown', 'açılır', 'seçim', 'liste', 'menü'],\n      'button': ['buton', 'button', 'tıkla', 'bas'],\n      'form': ['form', 'giriş', 'kayıt', 'doldur'],\n      'input': ['input', 'alan', 'field', 'giriş'],\n      'navigation': ['menü', 'nav', 'navigasyon', 'yönlendirme'],\n      'table': ['tablo', 'table', 'liste', 'satır'],\n      'modal': ['modal', 'popup', 'pencere'],\n      'search': ['arama', 'search', 'filtre'],\n      'upload': ['yükle', 'upload', 'dosya'],\n      'login': ['giriş', 'login', 'oturum']\n    };\n\n    for (const [component, keywords] of Object.entries(componentKeywords)) {\n      if (keywords.some(keyword => lowerDesc.includes(keyword))) {\n        analysis.components.push(component);\n      }\n    }\n\n    // Test tiplerini tespit et\n    const testTypeKeywords = {\n      'functional': ['işlevsel', 'functional', 'çalış'],\n      'ui': ['görünüm', 'ui', 'arayüz', 'görsel'],\n      'validation': ['doğrula', 'validation', 'kontrol', 'geçerli'],\n      'accessibility': ['erişilebilir', 'accessibility', 'keyboard'],\n      'performance': ['performans', 'hız', 'yavaş'],\n      'negative': ['negative', 'hatalı', 'yanlış', 'geçersiz']\n    };\n\n    for (const [testType, keywords] of Object.entries(testTypeKeywords)) {\n      if (keywords.some(keyword => lowerDesc.includes(keyword))) {\n        analysis.testTypes.push(testType);\n      }\n    }\n\n    // Varsayılan test tipleri\n    if (analysis.testTypes.length === 0) {\n      analysis.testTypes = ['functional', 'ui'];\n    }\n\n    // Öncelik belirleme\n    if (lowerDesc.includes('kritik') || lowerDesc.includes('önemli') || lowerDesc.includes('high')) {\n      analysis.priority = 'High';\n    } else if (lowerDesc.includes('düşük') || lowerDesc.includes('low')) {\n      analysis.priority = 'Low';\n    }\n\n    // Kullanıcı tipi\n    if (lowerDesc.includes('admin') || lowerDesc.includes('yönetici')) {\n      analysis.userType = 'admin';\n    }\n\n    return analysis;\n  }\n\n  // UI componentlerini tespit et\n  static detectUIComponents(analysis) {\n    const components = analysis.components.length > 0 ? \n      analysis.components : \n      ['button', 'form']; // varsayılan componentler\n\n    return components.map(component => ({\n      type: component,\n      name: this.getComponentName(component),\n      testScenarios: this.getComponentScenarios(component)\n    }));\n  }\n\n  // Component isimleri\n  static getComponentName(componentType) {\n    const names = {\n      'dropdown': 'Dropdown Menü',\n      'button': 'Buton',\n      'form': 'Form',\n      'input': 'Giriş Alanı',\n      'navigation': 'Navigasyon',\n      'table': 'Tablo',\n      'modal': 'Modal Pencere',\n      'search': 'Arama',\n      'upload': 'Dosya Yükleme',\n      'login': 'Giriş Sistemi'\n    };\n    return names[componentType] || componentType;\n  }\n\n  // Component için test senaryoları\n  static getComponentScenarios(componentType) {\n    const scenarios = {\n      'dropdown': [\n        'Tüm seçeneklerin görüntülenmesi',\n        'Seçim yapma işlemi',\n        'Keyboard navigation',\n        'Varsayılan değer kontrolü',\n        'Boş seçim validation'\n      ],\n      'button': [\n        'Buton tıklama işlevi',\n        'Hover state kontrolü',\n        'Disabled state kontrolü',\n        'Loading state kontrolü'\n      ],\n      'form': [\n        'Form doldurma işlemi',\n        'Validation kuralları',\n        'Submit işlemi',\n        'Reset işlemi',\n        'Error handling'\n      ],\n      'input': [\n        'Veri girişi',\n        'Validation kontrolleri',\n        'Placeholder text',\n        'Character limit',\n        'Format kontrolü'\n      ],\n      'navigation': [\n        'Menü öğelerine tıklama',\n        'Sayfa yönlendirmeleri',\n        'Breadcrumb kontrolü',\n        'Mobile responsive'\n      ],\n      'table': [\n        'Veri görüntüleme',\n        'Sıralama işlemleri',\n        'Filtreleme',\n        'Pagination',\n        'Row selection'\n      ],\n      'modal': [\n        'Modal açılması',\n        'Modal kapanması',\n        'Overlay tıklama',\n        'ESC tuşu ile kapanma'\n      ],\n      'search': [\n        'Arama işlevi',\n        'Sonuç görüntüleme',\n        'Boş arama',\n        'Filtre uygulama'\n      ],\n      'upload': [\n        'Dosya seçimi',\n        'Drag & drop',\n        'Dosya validation',\n        'Upload progress'\n      ],\n      'login': [\n        'Başarılı giriş',\n        'Hatalı giriş',\n        'Şifre unuttum',\n        'Session yönetimi'\n      ]\n    };\n\n    return scenarios[componentType] || ['Temel işlevsellik kontrolü'];\n  }\n\n  // Test case'leri üret\n  static generateTestCases(uiComponents, analysis) {\n    const testCases = [];\n    let testIdCounter = 1;\n\n    uiComponents.forEach(component => {\n      component.testScenarios.forEach(scenario => {\n        analysis.testTypes.forEach(testType => {\n          const testCase = this.createTestCase(\n            testIdCounter++,\n            component,\n            scenario,\n            testType,\n            analysis\n          );\n          testCases.push(testCase);\n        });\n      });\n    });\n\n    // Edge case'ler ve negative testler ekle\n    testCases.push(...this.generateEdgeCaseTests(uiComponents, analysis, testIdCounter));\n\n    return testCases;\n  }\n\n  // Tek bir test case oluştur\n  static createTestCase(id, component, scenario, testType, analysis) {\n    const priority = this.determinePriority(scenario, testType, analysis);\n    const steps = this.generateTestSteps(component, scenario, testType);\n    \n    return {\n      id: `TC_${String(id).padStart(3, '0')}`,\n      uuid: uuidv4(),\n      summary: `${component.name} - ${scenario}`,\n      description: `${component.name} bileşenindeki ${scenario.toLowerCase()} işlevselliğinin ${testType} testi`,\n      testType: testType === 'functional' ? 'Manual' : 'Manual',\n      priority: priority,\n      component: component.name,\n      labels: [testType, component.type, this.getTestLabel(scenario)],\n      preconditions: this.generatePreconditions(component, analysis),\n      steps: steps,\n      expectedResults: this.generateExpectedResults(component, scenario),\n      testData: this.generateTestData(component, scenario),\n      estimatedTime: this.estimateTestTime(steps.length),\n      createdAt: new Date().toISOString()\n    };\n  }\n\n  // Test adımlarını üret\n  static generateTestSteps(component, scenario, testType) {\n    const baseSteps = [\n      'Uygulamaya giriş yap',\n      `${component.name} bileşenine git`\n    ];\n\n    let specificSteps = [];\n\n    if (component.type === 'dropdown') {\n      specificSteps = [\n        'Dropdown menüsüne tıkla',\n        'Tüm seçeneklerin görüntülendiğini kontrol et',\n        'Bir seçenek seç',\n        'Seçimin yapıldığını doğrula'\n      ];\n    } else if (component.type === 'form') {\n      specificSteps = [\n        'Form alanlarını doldur',\n        'Gerekli alanları kontrol et',\n        'Submit butonuna tıkla',\n        'İşlem sonucunu kontrol et'\n      ];\n    } else if (component.type === 'button') {\n      specificSteps = [\n        'Butonun görünür olduğunu kontrol et',\n        'Butona tıkla',\n        'Beklenen aksiyonun gerçekleştiğini doğrula'\n      ];\n    } else {\n      specificSteps = [\n        `${component.name} ile etkileşim kur`,\n        'Beklenen davranışı kontrol et'\n      ];\n    }\n\n    return [...baseSteps, ...specificSteps];\n  }\n\n  // Beklenen sonuçları üret\n  static generateExpectedResults(component, scenario) {\n    const baseResults = [\n      'Başarıyla giriş yapılır',\n      `${component.name} bileşeni erişilebilir durumda`\n    ];\n\n    if (component.type === 'dropdown') {\n      baseResults.push(\n        'Dropdown menü açılır',\n        'Tüm seçenekler listelenir',\n        'Seçim işlemi başarıyla tamamlanır'\n      );\n    } else if (component.type === 'form') {\n      baseResults.push(\n        'Form alanları doldurulur',\n        'Validation kuralları uygulanır',\n        'Form başarıyla submit edilir'\n      );\n    } else {\n      baseResults.push(\n        'Bileşen beklenen şekilde çalışır',\n        'İşlem başarıyla tamamlanır'\n      );\n    }\n\n    return baseResults;\n  }\n\n  // Test verilerini üret\n  static generateTestData(component, scenario) {\n    const testData = {\n      validUser: 'test_user@example.com',\n      environment: 'Test Environment'\n    };\n\n    if (component.type === 'dropdown') {\n      testData.options = ['Seçenek 1', 'Seçenek 2', 'Seçenek 3'];\n    } else if (component.type === 'form') {\n      testData.validInputs = {\n        name: 'Test User',\n        email: 'test@example.com',\n        phone: '5551234567'\n      };\n      testData.invalidInputs = {\n        email: 'invalid-email',\n        phone: '123'\n      };\n    }\n\n    return testData;\n  }\n\n  // Edge case testleri üret\n  static generateEdgeCaseTests(uiComponents, analysis, startId) {\n    const edgeCases = [];\n    \n    // Performance test\n    edgeCases.push({\n      id: `TC_${String(startId).padStart(3, '0')}`,\n      uuid: uuidv4(),\n      summary: 'Performans Testi - Sayfa Yükleme',\n      description: 'Sayfanın makul sürede yüklendiğinin kontrolü',\n      testType: 'Manual',\n      priority: 'Low',\n      component: 'Page',\n      labels: ['performance', 'loading'],\n      preconditions: ['Browser açık', 'Internet bağlantısı mevcut'],\n      steps: [\n        'Sayfayı yenile',\n        'Yükleme süresini ölç',\n        'Tüm elementlerin yüklendiğini kontrol et'\n      ],\n      expectedResults: [\n        'Sayfa 3 saniye içinde yüklenir',\n        'Tüm elementler görünür durumda'\n      ],\n      testData: { maxLoadTime: '3 seconds' },\n      estimatedTime: '5 minutes',\n      createdAt: new Date().toISOString()\n    });\n\n    // Browser compatibility test\n    edgeCases.push({\n      id: `TC_${String(startId + 1).padStart(3, '0')}`,\n      uuid: uuidv4(),\n      summary: 'Cross-Browser Compatibility',\n      description: 'Farklı tarayıcılarda uyumluluğun kontrolü',\n      testType: 'Manual',\n      priority: 'Medium',\n      component: 'Application',\n      labels: ['compatibility', 'browser'],\n      preconditions: ['Farklı tarayıcılar yüklü'],\n      steps: [\n        'Chrome\\'da uygulamayı aç',\n        'Firefox\\'ta uygulamayı aç',\n        'Safari\\'de uygulamayı aç (Mac)',\n        'Her tarayıcıda işlevselliği test et'\n      ],\n      expectedResults: [\n        'Tüm tarayıcılarda aynı görünüm',\n        'İşlevsellik farklılığı yok'\n      ],\n      testData: { browsers: ['Chrome', 'Firefox', 'Safari', 'Edge'] },\n      estimatedTime: '15 minutes',\n      createdAt: new Date().toISOString()\n    });\n\n    return edgeCases;\n  }\n\n  // Yardımcı fonksiyonlar\n  static determinePriority(scenario, testType, analysis) {\n    if (testType === 'functional' || scenario.includes('Ana')) {\n      return 'High';\n    } else if (testType === 'validation' || testType === 'ui') {\n      return 'Medium';\n    }\n    return 'Low';\n  }\n\n  static getTestLabel(scenario) {\n    if (scenario.includes('Keyboard')) return 'accessibility';\n    if (scenario.includes('Validation')) return 'validation';\n    if (scenario.includes('Error')) return 'negative';\n    return 'functional';\n  }\n\n  static generatePreconditions(component, analysis) {\n    const basePreconditions = [\n      'Test ortamında uygulama erişilebilir',\n      'Geçerli kullanıcı hesabı mevcut'\n    ];\n\n    if (analysis.userType === 'admin') {\n      basePreconditions.push('Admin yetkilerine sahip kullanıcı');\n    }\n\n    return basePreconditions;\n  }\n\n  static estimateTestTime(stepCount) {\n    const baseTime = 3; // dakika\n    const perStepTime = 1; // dakika per step\n    return `${baseTime + (stepCount * perStepTime)} dakika`;\n  }\n}\n\nexport default TestCaseGenerator; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}